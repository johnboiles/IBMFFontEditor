 buff ← 0;
 pBit ← 8;
 i ← 1;
 hBit ← width;
 on ← false;
 state ← false;
 count ← row [0];
 repeatFlag ← 0;
 while (row [i] <> end_of_char) ∨ state ∨ (count > 0) do begin
   if state then begin
     count ← rCount ;
     i ← rI;
     on ← rOn;
     decr(repeatFlag);
   end
   else begin
     rCount ← count;
     rI ← i; rOn ← on ;
   end;

   (* Send one row of bits *)
   repeat
     if count = 0 then begin
       if row [i] < 0 then begin
         if ¬state then
           repeatFlag ← −row[i];
         incr(i);
       end;
       count ← row[i];
       incr(i);
       on ← ¬on ;
     end;
     if (count ≥ pBit ) ∧ (pBit < hBit ) then begin
       (* we end a byte, we don’t end the row *)
       if on then
         buff ← buff + power[pBit ] − 1;
         pk_byte(buff);
         buff ← 0;
         hBit ← hBit − pBit;
         count ← count − pBit;
         pBit ← 8;
       end
       else if (count < pBit ) ∧ (count < hBit ) then begin
         (* we end neither the row nor the byte *)
         if on then buff ← buff + power[pBit] − power[pBit − count];
         pBit ← pBit − count;
         hBit ← hBit − count;
         count ← 0;
       end
       else begin (* we end a row and maybe a byte *)
       if on then buff ← buff + power[pBit] − power[pBit − hBit];
       count ← count − hBit;
       pBit ← pBit − hBit;
       hBit ← width ;
       if pBit = 0 then begin
         pk_byte(buff);
         buff ← 0;
         pBit ← 8;
       end;
     end;
   until hBit = width

   if state ∧ (repeatFlag = 0) then begin
     count ← sCount;
     i ← sI;
     on ← sOn ; state ← false ;
   end
   else if ¬state ∧ (repeatFlag > 0) then begin
     sCount ← count;
     sI ← i;
     sOn ← on;
     state ← true ;
   end;
 end;
 if pBit <> 8 then pk_byte(buff);
end
